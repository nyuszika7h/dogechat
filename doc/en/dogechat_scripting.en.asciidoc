= DogeChat scripting guide
:author: Sébastien Helleu
:email: flashcode@flashtux.org
:lang: en
:toc2:
:toclevels: 3
:max-width: 100%


This manual documents DogeChat chat client, it is part of DogeChat.

Latest version of this document can be found on this page:
https://dogechat.org/doc


[[introduction]]
== Introduction

DogeChat (Doge Enhanced Environment for Chat) is a free chat client, fast and
light, designed for many operating systems.

This manual documents way to write scripts for DogeChat, using one of supported
script languages:

* python
* perl
* ruby
* lua
* tcl
* guile (scheme)
* javascript

[NOTE]
Almost all examples in this doc are written in Python, but API is the same for
other languages.

[[scripts_in_dogechat]]
== Scripts in DogeChat

[[languages_specificities]]
=== Languages specificities

==== Python

* You have to `import dogechat`
* Functions `print*` are called `prnt*` in python (because 'print' is reserved
  keyword)
* Functions are called with `dogechat.xxx(arg1, arg2, ...)`

==== Perl

* Functions are called with `dogechat::xxx(arg1, arg2, ...);`

==== Ruby

* You have to define 'dogechat_init' and call 'register' inside
* Functions are called with `Dogechat.xxx(arg1, arg2, ...)`
* Due to a limitation of Ruby (15 arguments max by function), the function
  `Dogechat.config_new_option` receives the callbacks in an array of 6 strings
  (3 callbacks + 3 data strings), so a call to this function looks like:

[source,ruby]
----
Dogechat.config_new_option(config, section, "name", "string", "description of option", "", 0, 0,
                          "value", "value", 0, ["check_cb", "", "change_cb", "", "delete_cb", ""])
----

==== Lua

* Functions are called with `dogechat.xxx(arg1, arg2, ...)`

==== Tcl

* Functions are called with `dogechat::xxx arg1 arg2 ...`

==== Guile (scheme)

* Functions are called with `(dogechat:xxx arg1 arg2 ...)`
* Following functions take one list of arguments (instead of many arguments
  for other functions), because number of arguments exceed number of allowed
  arguments in Guile:
** config_new_section
** config_new_option
** bar_new

==== Javascript

* Functions are called with `dogechat.xxx(arg1, arg2, ...);`

[[register_function]]
=== Register function

All DogeChat scripts must "register" themselves to DogeChat, and this must be
first DogeChat function called in script.

Prototype:

[source,python]
----
dogechat.register(name, author, version, license, description, shutdown_function, charset)
----

Arguments:

* 'name': string, internal name of script
* 'author': string, author name
* 'version': string, script version
* 'license': string, script license
* 'description': string, short description of script
* 'shutdown_function': string, name of function called when script is unloaded
  (can be empty string)
* 'charset': string, script charset (if your script is UTF-8, you can use blank
  value here, because UTF-8 is default charset)

Example of script, for each language:

* Python:

[source,python]
----
import dogechat

dogechat.register("test_python", "FlashCode", "1.0", "GPL3", "Test script", "", "")
dogechat.prnt("", "Hello, from python script!")
----

* Perl:

[source,perl]
----
dogechat::register("test_perl", "FlashCode", "1.0", "GPL3", "Test script", "", "");
dogechat::print("", "Hello, from perl script!");
----

* Ruby:

[source,ruby]
----
def dogechat_init
  Dogechat.register("test_ruby", "FlashCode", "1.0", "GPL3", "Test script", "", "")
  Dogechat.print("", "Hello, from ruby script!")
  return Dogechat::DOGECHAT_RC_OK
end
----

* Lua:

[source,lua]
----
dogechat.register("test_lua", "FlashCode", "1.0", "GPL3", "Test script", "", "")
dogechat.print("", "Hello, from lua script!")
----

* Tcl:

[source,tcl]
----
dogechat::register "test_tcl" "FlashCode" "1.0" "GPL3" "Test script" "" ""
dogechat::print "" "Hello, from tcl script!"
----

* Guile (scheme):

[source,lisp]
----
(dogechat:register "test_scheme" "FlashCode" "1.0" "GPL3" "Test script" "" "")
(dogechat:print "" "Hello, from scheme script!")
----

* Javascript:

[source,javascript]
----
dogechat.register("test_js", "FlashCode", "1.0", "GPL3", "Test script", "", "");
dogechat.print("", "Hello, from javascript script!");
----

[[load_script]]
=== Load script

It is recommended to use the "script" plugin to load scripts, for example:

----
/script load script.py
/script load script.pl
/script load script.rb
/script load script.lua
/script load script.tcl
/script load script.scm
/script load script.js
----

Each language has also its own command:

----
/python load script.py
/perl load script.pl
/ruby load script.rb
/lua load script.lua
/tcl load script.tcl
/guile load script.scm
/javascript load script.js
----

You can make link in directory 'language/autoload' to autoload script when
DogeChat is starting.

For example with Python:

----
$ cd ~/.dogechat/python/autoload
$ ln -s ../script.py
----

[NOTE]
When installing a script with command `/script install` the link in 'autoload'
directory is automatically created.

[[differences_with_c_api]]
== Differences with C API

Script API is almost the same as C plugin API.
You can look at 'DogeChat Plugin API Reference' for detail about each function
in API: prototype, arguments, return values, examples.

It's important to make difference between a 'plugin' and a 'script': a
'plugin' is a binary file compiled and loaded with command `/plugin`, whereas
a 'script' is a text file loaded with a plugin like 'python' with command
`/python`.

When your script 'test.py' calls a DogeChat API function, path is like that:

....
               ┌──────────────────────┐        ╔══════════════════╗
               │     python plugin    │        ║  DogeChat "core"  ║
               ├────────────┬─────────┤        ╟─────────┐        ║
test.py ─────► │ script API │  C API  │ ─────► ║  C API  │        ║
               └────────────┴─────────┘        ╚═════════╧════════╝
....

When DogeChat calls a callback in your script 'test.py', it's reverse of
previous path:

....
╔══════════════════╗        ┌──────────────────────┐
║  DogeChat "core"  ║        │     python plugin    │
║        ┌─────────╢        ├─────────┬────────────┤
║        │  C API  ║ ─────► │  C API  │ script API │ ─────► test.py
╚════════╧═════════╝        └─────────┴────────────┘
....

[[pointers]]
=== Pointers

As you probably know, there is not really "pointers" in scripts. So when API
functions return pointer, it is converted to string for script.

For example, if function return pointer 0x1234ab56, script will get string
"0x1234ab56".

And when an API function expects a pointer in arguments, script must give that
string value. C plugin will convert it to real pointer before calling C API
function.

Empty string or "0x0" are allowed, they means NULL in C.
For example, to print data on core buffer (DogeChat main buffer), you can do:

[source,python]
----
dogechat.prnt("", "hi!")
----

[WARNING]
In many functions, for speed reasons, DogeChat does not check if your pointer
is correct or not. It's your job to check you're giving a valid pointer,
otherwise you may see a nice crash report ;)

[[callbacks]]
=== Callbacks

Almost all DogeChat callbacks must return DOGECHAT_RC_OK or DOGECHAT_RC_ERROR
(exception is modifier callback, which returns a string).

C callbacks are using a "data" argument, which is a pointer. In script API,
this "data" is a string with a any value (it's not a pointer).

Example of callback, for each language:

* Python:

[source,python]
----
def timer_cb(data, remaining_calls):
    dogechat.prnt("", "timer! data=%s" % data)
    return dogechat.DOGECHAT_RC_OK

dogechat.hook_timer(1000, 0, 1, "timer_cb", "test")
----

* Perl:

[source,perl]
----
sub timer_cb {
    my ($data, $remaining_calls) = @_;
    dogechat::print("", "timer! data=$data");
    return dogechat::DOGECHAT_RC_OK;
}

dogechat::hook_timer(1000, 0, 1, "timer_cb", "test");
----

* Ruby:

[source,ruby]
----
def timer_cb(data, remaining_calls)
  Dogechat.print("", "timer! data=#{data}");
  return Dogechat::DOGECHAT_RC_OK
end

Dogechat.hook_timer(1000, 0, 1, "timer_cb", "test");
----

* Lua:

[source,lua]
----
function timer_cb(data, remaining_calls)
    dogechat.print("", "timer! data="..data)
    return dogechat.DOGECHAT_RC_OK
end

dogechat.hook_timer(1000, 0, 1, "timer_cb", "test")
----

* Tcl:

[source,tcl]
----
proc timer_cb { data remaining_calls } {
    dogechat::print {} "timer! data=$data"
    return $::dogechat::DOGECHAT_RC_OK
}

dogechat::hook_timer 1000 0 1 timer_cb test
----

* Guile (scheme):

[source,lisp]
----
(define (timer_cb data remaining_calls)
  (dogechat:print "" (string-append "timer! data=" data))
  dogechat:DOGECHAT_RC_OK
)

(dogechat:hook_timer 1000 0 1 "timer_cb" "test")
----

* Javascript:

[source,javascript]
----
function timer_cb(data, remaining_calls) {
    dogechat.print("", "timer! data=" + data);
    return dogechat.DOGECHAT_RC_OK;
}

dogechat.hook_timer(1000, 0, 1, "timer_cb", "test");
----

[[script_api]]
== Script API

For more information about functions in API, please read
'DogeChat Plugin API Reference'.

[[script_api_functions]]
=== Functions

List of functions in script API:

[width="100%",cols="^1,10",options="header"]
|===
| Category            | Functions
| general             |
  register
| plugins             |
  plugin_get_name
| strings             |
  charset_set, iconv_to_internal, iconv_from_internal, gettext, ngettext, +
  strlen_screen, string_match, string_has_highlight, string_has_highlight_regex,
  string_mask_to_regex, string_remove_color, string_is_command_char,
  string_input_for_buffer, string_eval_expression, string_eval_path_home
| directories         |
  mkdir_home, mkdir, mkdir_parents
| sorted lists        |
  list_new, list_add, list_search, list_search_pos, list_casesearch,
  list_casesearch_pos, list_get, list_set, list_next, list_prev, list_string,
  list_size, list_remove, list_remove_all, list_free
| configuration files |
  config_new, config_new_section, config_search_section, config_new_option,
  config_search_option, +
  config_string_to_boolean, config_option_reset, config_option_set,
  config_option_set_null, config_option_unset, config_option_rename,
  config_option_is_null, config_option_default_is_null, +
  config_boolean, config_boolean_default, config_integer, config_integer_default,
  config_string, config_string_default, config_color, config_color_default, +
  config_write_option, config_write_line, config_write, config_read,
  config_reload, +
  config_option_free, config_section_free_options, config_section_free,
  config_free, +
  config_get, config_get_plugin, config_is_set_plugin, config_set_plugin,
  config_set_desc_plugin, config_unset_plugin
| key bindings        |
  key_bind, key_unbind
| display             |
  prefix, color, print (for python: prnt), print_date_tags (for python:
  prnt_date_tags), print_y (for python: prnt_y), log_print
| hooks               |
  hook_command, hook_command_run, hook_timer, hook_fd, hook_process,
  hook_process_hashtable, hook_connect, hook_print, hook_signal,
  hook_signal_send, hook_hsignal, hook_hsignal_send, hook_config,
  hook_completion, hook_completion_list_add, hook_modifier, hook_modifier_exec,
  hook_info, hook_info_hashtable, hook_infolist, hook_focus, hook_set, unhook,
  unhook_all
| buffers             |
  buffer_new, current_buffer, buffer_search, buffer_search_main, buffer_clear,
  buffer_close, buffer_merge, buffer_unmerge, buffer_get_integer,
  buffer_get_string, buffer_get_pointer, buffer_set,
  buffer_string_replace_local_var, buffer_match_list
| windows             |
  current_window, window_search_with_buffer, window_get_integer,
  window_get_string, window_get_pointer, window_set_title
| nicklist            |
  nicklist_add_group, nicklist_search_group, nicklist_add_nick,
  nicklist_search_nick, nicklist_remove_group, nicklist_remove_nick,
  nicklist_remove_all, nicklist_group_get_integer, nicklist_group_get_string,
  nicklist_group_get_pointer, nicklist_group_set, nicklist_nick_get_integer,
  nicklist_nick_get_string, nicklist_nick_get_pointer, nicklist_nick_set
| bars                |
  bar_item_search, bar_item_new, bar_item_update, bar_item_remove, bar_search,
  bar_new, bar_set, bar_update, bar_remove
| commands            |
  command
| infos               |
  info_get, info_get_hashtable
| infolists           |
  infolist_new, infolist_new_item, infolist_new_var_integer,
  infolist_new_var_string, infolist_new_var_pointer, infolist_new_var_time, +
  infolist_get, infolist_next, infolist_prev, infolist_reset_item_cursor, +
  infolist_fields, infolist_integer, infolist_string, infolist_pointer, +
  infolist_time, infolist_free
| hdata               |
  hdata_get, hdata_get_var_offset, hdata_get_var_type_string,
  hdata_get_var_array_size, hdata_get_var_array_size_string,
  hdata_get_var_hdata, hdata_get_list, hdata_check_pointer, hdata_move,
  hdata_search, hdata_char, hdata_integer, hdata_long, hdata_string,
  hdata_pointer, hdata_time, hdata_hashtable, hdata_update, hdata_get_string
| upgrade             |
  upgrade_new, upgrade_write_object, upgrade_read, upgrade_close
|===

[[script_api_constants]]
=== Constants

List of constants in script API:

[width="100%",cols="^1,10",options="header"]
|===
| Category            | Constants
| return codes        |
  DOGECHAT_RC_OK, DOGECHAT_RC_OK_EAT, DOGECHAT_RC_ERROR
| configuration files |
  DOGECHAT_CONFIG_READ_OK, DOGECHAT_CONFIG_READ_MEMORY_ERROR,
  DOGECHAT_CONFIG_READ_FILE_NOT_FOUND, DOGECHAT_CONFIG_WRITE_OK,
  DOGECHAT_CONFIG_WRITE_ERROR, DOGECHAT_CONFIG_WRITE_MEMORY_ERROR, +
  DOGECHAT_CONFIG_OPTION_SET_OK_CHANGED, DOGECHAT_CONFIG_OPTION_SET_OK_SAME_VALUE,
  DOGECHAT_CONFIG_OPTION_SET_ERROR, DOGECHAT_CONFIG_OPTION_SET_OPTION_NOT_FOUND,
  DOGECHAT_CONFIG_OPTION_UNSET_OK_NO_RESET, DOGECHAT_CONFIG_OPTION_UNSET_OK_RESET,
  DOGECHAT_CONFIG_OPTION_UNSET_OK_REMOVED, DOGECHAT_CONFIG_OPTION_UNSET_ERROR
| sorted lists        |
  DOGECHAT_LIST_POS_SORT, DOGECHAT_LIST_POS_BEGINNING, DOGECHAT_LIST_POS_END
| hotlist             |
  DOGECHAT_HOTLIST_LOW, DOGECHAT_HOTLIST_MESSAGE, DOGECHAT_HOTLIST_PRIVATE,
  DOGECHAT_HOTLIST_HIGHLIGHT
| hook process        |
  DOGECHAT_HOOK_PROCESS_RUNNING, DOGECHAT_HOOK_PROCESS_ERROR
| hook connect        |
  DOGECHAT_HOOK_CONNECT_OK, DOGECHAT_HOOK_CONNECT_ADDRESS_NOT_FOUND,
  DOGECHAT_HOOK_CONNECT_IP_ADDRESS_NOT_FOUND, DOGECHAT_HOOK_CONNECT_CONNECTION_REFUSED,
  DOGECHAT_HOOK_CONNECT_PROXY_ERROR, DOGECHAT_HOOK_CONNECT_LOCAL_HOSTNAME_ERROR,
  DOGECHAT_HOOK_CONNECT_GNUTLS_INIT_ERROR, DOGECHAT_HOOK_CONNECT_GNUTLS_HANDSHAKE_ERROR,
  DOGECHAT_HOOK_CONNECT_MEMORY_ERROR, DOGECHAT_HOOK_CONNECT_TIMEOUT,
  DOGECHAT_HOOK_CONNECT_SOCKET_ERROR
| hook signal         |
  DOGECHAT_HOOK_SIGNAL_STRING, DOGECHAT_HOOK_SIGNAL_INT, DOGECHAT_HOOK_SIGNAL_POINTER
|===

[[common_tasks]]
== Common tasks

This chapter shows some common tasks, with examples.
Only partial things in API are used here, for full reference, see
'DogeChat Plugin API Reference'.

[[buffers]]
=== Buffers

[[buffers_display_messages]]
==== Display messages

An empty string is often used to work with DogeChat core buffer. For other
buffers, you must give pointer (as string, see <<pointers,pointers>>).

Examples:

[source,python]
----
# display "hello" on core buffer
dogechat.prnt("", "hello")

# display "hello" on core buffer, but do not write it to log file
# (version >= 0.3.3 only)
dogechat.prnt_date_tags("", 0, "no_log", "hello")

# display prefix "==>" and message "hello" on current buffer
# (prefix and message must be separated by tab)
dogechat.prnt(dogechat.current_buffer(), "==>\thello")

# display error message on core buffer (with error prefix)
dogechat.prnt("", "%swrong arguments" % dogechat.prefix("error"))

# display message with color on core buffer
dogechat.prnt("", "text %syellow on blue" % dogechat.color("yellow,blue"))

# search buffer and display message
# (full name of buffer is plugin.name, for example: "irc.freenode.#dogechat")
buffer = dogechat.buffer_search("irc", "freenode.#dogechat")
dogechat.prnt(buffer, "message on #dogechat channel")

# other solution to find an IRC buffer (better)
# (note that server and channel are separated by a comma)
buffer = dogechat.info_get("irc_buffer", "freenode,#dogechat")
dogechat.prnt(buffer, "message on #dogechat channel")
----

[NOTE]
Print function is called `print` in Perl/Ruby/Lua/Tcl/Guile/Javascript and
`prnt` in Python.

[[buffers_send_text]]
==== Send text to buffer

You can send text or command to a buffer. This is exactly like if you type text
on command line and press [Enter].

Examples:

[source,python]
----
# execute command "/help" on current buffer (result is on core buffer)
dogechat.command("", "/help")

# send "hello" to #dogechat IRC channel (users on channel will see message)
buffer = dogechat.info_get("irc_buffer", "freenode,#dogechat")
dogechat.command(buffer, "hello")
----

[[buffers_new]]
==== Create new buffer

You can create a new buffer in your script, then use it for displaying messages.

Two callbacks can be called (they are optional): one for input data (when you
type some text and press [Enter] on buffer), the other is called when buffer is
closed (for example by `/buffer close`).

Example:

[source,python]
----
# callback for data received in input
def buffer_input_cb(data, buffer, input_data):
    # ...
    return dogechat.DOGECHAT_RC_OK

# callback called when buffer is closed
def buffer_close_cb(data, buffer):
    # ...
    return dogechat.DOGECHAT_RC_OK

# create buffer
buffer = dogechat.buffer_new("mybuffer", "buffer_input_cb", "", "buffer_close_cb", "")

# set title
dogechat.buffer_set(buffer, "title", "This is title for my buffer.")

# disable logging, by setting local variable "no_log" to "1"
dogechat.buffer_set(buffer, "localvar_set_no_log", "1")
----

[[buffers_properties]]
==== Buffer properties

You can read buffer properties, as string, integer or pointer.

Examples:

[source,python]
----
buffer = dogechat.current_buffer()

number = dogechat.buffer_get_integer(buffer, "number")
name = dogechat.buffer_get_string(buffer, "name")
short_name = dogechat.buffer_get_string(buffer, "short_name")
----

It is possible to add, read or delete local variables in buffer:

[source,python]
----
# add local variable
dogechat.buffer_set(buffer, "localvar_set_myvar", "my_value")

# read local variable
myvar = dogechat.buffer_get_string(buffer, "localvar_myvar")

# delete local variable
dogechat.buffer_set(buffer, "localvar_del_myvar", "")
----

To see local variables of a buffer, do this command in DogeChat:

----
/buffer localvar
----

[[hooks]]
=== Hooks

[[hook_command]]
==== Add new command

Add a custom command with `hook_command`. You can use a custom completion
template to complete arguments of your command.

Example:

[source,python]
----
def my_command_cb(data, buffer, args):
    # ...
    return dogechat.DOGECHAT_RC_OK

hook = dogechat.hook_command("myfilter", "description of myfilter",
    "[list] | [enable|disable|toggle [name]] | [add name plugin.buffer tags regex] | [del name|-all]",
    "description of arguments...",
    "list"
    " || enable %(filters_names)"
    " || disable %(filters_names)"
    " || toggle %(filters_names)"
    " || add %(filters_names) %(buffers_plugins_names)|*"
    " || del %(filters_names)|-all",
    "my_command_cb", "")
----

And then in DogeChat:

----
/help myfilter

/myfilter arguments...
----

[[hook_timer]]
==== Add a timer

Add a timer with `hook_timer`.

Example:

[source,python]
----
def timer_cb(data, remaining_calls):
    # ...
    return dogechat.DOGECHAT_RC_OK

# timer called each minute when second is 00
dogechat.hook_timer(60 * 1000, 60, 0, "timer_cb", "")
----

[[hook_process]]
==== Run a background process

You can run a background process with `hook_process`. Your callback will be
called when data is ready. It may be called many times.

For the last call to your callback, 'rc' is set to 0 or positive value, it's
return code of command.

Example:

[source,python]
----
process_output = ""

def my_process_cb(data, command, rc, out, err):
    global process_output
    if out != "":
        process_output += out
    if int(rc) >= 0:
        dogechat.prnt("", process_output)
    return dogechat.DOGECHAT_RC_OK

dogechat.hook_process("/bin/ls -l /etc", 10 * 1000, "my_process_cb", "")
----

[[url_transfer]]
==== URL transfer

_New in version 0.3.7._

To download URL (or post to URL), you have to use function `hook_process`, or
`hook_process_hashtable` if you need to set options for URL transfer.

Example of URL transfer without option: the HTML page will be received as "out"
in callback (standard output of process):

[source,python]
----
# Display current stable version of DogeChat.
dogechat_version = ""

def dogechat_process_cb(data, command, rc, out, err):
    global dogechat_version
    if out != "":
        dogechat_version += out
    if int(rc) >= 0:
        dogechat.prnt("", "Current DogeChat stable is: %s" % dogechat_version)
    return dogechat.DOGECHAT_RC_OK

dogechat.hook_process("url:https://dogechat.org/dev/info/stable/",
                     30 * 1000, "dogechat_process_cb", "")
----

[TIP]
All infos available about DogeChat are on page https://dogechat.org/dev/info

Example of URL transfer with an option: download latest DogeChat development
package in file '/tmp/dogechat-devel.tar.gz':

[source,python]
----
def my_process_cb(data, command, rc, out, err):
    if int(rc) >= 0:
        dogechat.prnt("", "End of transfer (rc=%s)" % rc)
    return dogechat.DOGECHAT_RC_OK

dogechat.hook_process_hashtable("url:https://dogechat.org/files/src/dogechat-devel.tar.gz",
                               {"file_out": "/tmp/dogechat-devel.tar.gz"},
                               30 * 1000, "my_process_cb", "")
----

For more information about URL transfer and available options, see functions
`hook_process` and `hook_process_hashtable` in 'DogeChat Plugin API Reference'.

[[config_options]]
=== Config / options

[[config_options_set_script]]
==== Set options for script

Function `config_is_set_plugin` is used to check if an option is set or not,
and `config_set_plugin` to set option.

Example:

[source,python]
----
script_options = {
    "option1" : "value1",
    "option2" : "value2",
    "option3" : "value3",
}
for option, default_value in script_options.items():
    if not dogechat.config_is_set_plugin(option):
        dogechat.config_set_plugin(option, default_value)
----

[[config_options_detect_changes]]
==== Detect changes

You must use `hook_config` to be notified if user changes some script options.

Example:

[source,python]
----
SCRIPT_NAME = "myscript"

# ...

def config_cb(data, option, value):
    """Callback called when a script option is changed."""
    # for example, read all script options to script variables...
    # ...
    return dogechat.DOGECHAT_RC_OK

# ...

dogechat.hook_config("plugins.var.python." + SCRIPT_NAME + ".*", "config_cb", "")
# for other languages, change "python" with your language (perl/ruby/lua/tcl/guile/javascript)
----

[[config_options_dogechat]]
==== Read DogeChat options

Function `config_get` returns pointer to option. Then, depending on option type,
you must call `config_string`, `config_boolean`, `config_integer` or
`config_color`.

[source,python]
----
# string
dogechat.prnt("", "value of option dogechat.look.item_time_format is: %s"
                 % (dogechat.config_string(dogechat.config_get("dogechat.look.item_time_format"))))

# boolean
dogechat.prnt("", "value of option dogechat.look.day_change is: %d"
                 % (dogechat.config_boolean(dogechat.config_get("dogechat.look.day_change"))))

# integer
dogechat.prnt("", "value of option dogechat.look.scroll_page_percent is: %d"
                 % (dogechat.config_integer(dogechat.config_get("dogechat.look.scroll_page_percent"))))

# color
dogechat.prnt("", "value of option dogechat.color.chat_delimiters is: %s"
                 % (dogechat.config_color(dogechat.config_get("dogechat.color.chat_delimiters"))))
----

[[irc]]
=== IRC

[[irc_catch_messages]]
==== Catch messages

IRC plugin sends two signals for a message received (`xxx` is IRC internal
server name, `yyy` is IRC command name like JOIN, QUIT, PRIVMSG, 301, ..):

xxxx,irc_in_yyy::
    signal sent before processing message

xxx,irc_in2_yyy::
    signal sent after processing message

[source,python]
----
def join_cb(data, signal, signal_data):
    # signal is for example: "freenode,irc_in2_join"
    # signal_data is IRC message, for example: ":nick!user@host JOIN :#channel"
    nick = dogechat.info_get("irc_nick_from_host", signal_data)
    server = signal.split(",")[0]
    channel = signal_data.split(":")[-1]
    buffer = dogechat.info_get("irc_buffer", "%s,%s" % (server, channel))
    if buffer:
        dogechat.prnt(buffer, "Eheh, %s has joined this channel!" % nick)
    return dogechat.DOGECHAT_RC_OK

# it is useful here to use "*" as server, to catch JOIN messages on all IRC
# servers
dogechat.hook_signal("*,irc_in2_join", "join_cb", "")
----

[[irc_modify_messages]]
==== Modify messages

IRC plugin sends a "modifier" called "irc_in_xxx" ("xxx" is IRC command) for a
message received, so that you can modify it.

[source,python]
----
def modifier_cb(data, modifier, modifier_data, string):
    # add server name to all messages received
    # (OK that's not very useful, but that's just an example!)
    return "%s %s" % (string, modifier_data)

dogechat.hook_modifier("irc_in_privmsg", "modifier_cb", "")
----

[WARNING]
A malformed message could crash DogeChat or cause severe problems!

[[irc_message_parse]]
==== Parse message

_New in version 0.3.4._

You can parse an IRC message with info_hashtable called "irc_message_parse".

The result is a hashtable with following keys
(the example values are built with this message:
`@time=2015-06-27T16:40:35.000Z :nick!user@host PRIVMSG #dogechat :hello!`):

[width="100%",cols="1,^2,10,8",options="header"]
|===
| Key | DogeChat version | Description | Example

| tags | ≥ 0.4.0 |
  The tags in message (can be empty) |
  `time=2015-06-27T16:40:35.000Z`

| message_without_tags | ≥ 0.4.0 |
  The message without the tags (the same as message if there are no tags) |
  `:nick!user@host PRIVMSG #dogechat :hello!`

| nick | ≥ 0.3.4 |
  The origin nick |
  `nick`

| host | ≥ 0.3.4 |
  The origin host (includes the nick) |
  `nick!user@host`

| command | ≥ 0.3.4 |
  The command ('PRIVMSG', 'NOTICE', ...) |
  `PRIVMSG`

| channel | ≥ 0.3.4 |
  The target channel |
  `#dogechat`

| arguments | ≥ 0.3.4 |
  The command arguments (includes the channel) |
  `#dogechat :hello!`

| text | ≥ 1.3 |
  The text (for example user message) |
  `hello!`

| pos_command | ≥ 1.3 |
  The index of 'command' in message ("-1" if 'command' was not found) |
  `47`

| pos_arguments | ≥ 1.3 |
  The index of 'arguments' in message ("-1" if 'arguments' was not found) |
  `55`

| pos_channel | ≥ 1.3 |
  The index of 'channel' in message ("-1" if 'channel' was not found) |
  `55`

| pos_text | ≥ 1.3 |
  The index of 'text' in message ("-1" if 'text' was not found) |
  `65`
|===

[source,python]
----
dict = dogechat.info_get_hashtable(
    "irc_message_parse",
    {"message": "@time=2015-06-27T16:40:35.000Z :nick!user@host PRIVMSG #dogechat :hello!"})

# dict == {
#     "tags": "time=2015-06-27T16:40:35.000Z",
#     "message_without_tags": ":nick!user@host PRIVMSG #dogechat :hello!",
#     "nick": "nick",
#     "host": "nick!user@host",
#     "command": "PRIVMSG",
#     "channel": "#dogechat",
#     "arguments": "#dogechat :hello!",
#     "text": "hello!",
#     "pos_command": "47",
#     "pos_arguments": "55",
#     "pos_channel": "55",
#     "pos_text": "65",
# }
----

[[infos]]
=== Infos

[[infos_dogechat_version]]
==== DogeChat version

The best way to check version is to ask "version_number" and make integer
comparison with hexadecimal version number.

Example:

[source,python]
----
version = dogechat.info_get("version_number", "") or 0
if int(version) >= 0x00030200:
    dogechat.prnt("", "This is DogeChat 0.3.2 or newer")
else:
    dogechat.prnt("", "This is DogeChat 0.3.1 or older")
----

[NOTE]
Versions ≤ 0.3.1.1 return empty string for 'info_get("version_number")' so you
must check that value returned is *not* empty.

To get version as string:

[source,python]
----
# this will display for example "Version 0.3.2"
dogechat.prnt("", "Version %s" % dogechat.info_get("version", ""))
----

[[infos_other]]
==== Other infos

[source,python]
----
# DogeChat home directory, for example: "/home/xxxx/.dogechat"
dogechat.prnt("", "DogeChat home dir: %s" % dogechat.info_get("dogechat_dir", ""))

# keyboard inactivity
dogechat.prnt("", "Inactivity since %s seconds" % dogechat.info_get("inactivity", ""))
----

[[infolists]]
=== Infolists

[[infolists_read]]
==== Read an infolist

You can read infolist built by DogeChat or other plugins.

Example:

[source,python]
----
# read infolist "buffer", to get list of buffers
infolist = dogechat.infolist_get("buffer", "", "")
if infolist:
    while dogechat.infolist_next(infolist):
        name = dogechat.infolist_string(infolist, "name")
        dogechat.prnt("", "buffer: %s" % name)
    dogechat.infolist_free(infolist)
----

[IMPORTANT]
Don't forget to call `infolist_free` to free memory used by infolist, because
DogeChat will not automatically free memory.
